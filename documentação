UNICEPLAC
ANALISE E DESENVOLVIMENTO DE SISTEMA
TECH PETT
MODELAGEM DE NEGOCIOS
GAMA – DF
2025
INTRODUÇÃO
1.1 - OBJETIVO
A TechPett nasceu com o propósito de transformar a forma como as pessoas
cuidam de seus animais de estimação, unindo praticidade, segurança e qualidade
em um ecossistema digital completo. Mais do que uma empresa de tecnologia, a
TechPett é uma parceira dos tutores e dos profissionais do setor pet, oferecendo
soluções inteligentes que facilitam o dia a dia e elevam o padrão de cuidado com os
animais, seja em casa, em clínicas veterinárias ou em pet shops.
A missão da Tech Pett é simplificar o acesso a serviços e produtos pet, conectando
tutores, empresas e especialistas em um único aplicativo. Com poucos toques na
tela, é possível encontrar estabelecimentos próximos, agendar consultas e serviços,
contratar banho e tosa, vacinações, teleatendimentos veterinários e muito mais —
tudo de forma prática, rápida e segura. Essa integração tecnológica permite que o
tutor tenha controle total sobre os cuidados do seu pet, com informações
atualizadas, histórico de serviços e recomendações personalizadas.
Além de oferecer conveniência para os tutores, a TechPett valoriza a qualidade e a
confiança nos serviços prestados. Para isso, mantém parcerias estratégicas com pet
shops, clínicas e profissionais altamente qualificados, criando uma rede colaborativa
que preza pela excelência e pela padronização do atendimento. Essa rede não
apenas fortalece o mercado pet, mas também cria oportunidades de crescimento
sustentável para os parceiros, gerando um impacto positivo em toda a cadeia.
A empresa também acredita no poder da tecnologia com propósito, desenvolvendo
ferramentas que unem inovação e empatia. Através de um ambiente digital intuitivo,
a TechPett oferece recursos de monitoramento, agendamento inteligente,
notificações automáticas de vacinas e consultas, além de um sistema de avaliação
transparente, que permite aos tutores escolherem os melhores serviços com base
em experiências reais de outros usuários.
O propósito central da TechPett é mostrar que cuidar de um animal — seja
doméstico ou exótico — pode ser uma experiência prazerosa, responsável e
acessível a todos. A marca se posiciona como uma aliada na promoção da saúde,
do bem-estar e da qualidade de vida animal, integrando tecnologia, carinho e
conveniência em um só lugar.
O propósito central da TechPett é mostrar que cuidar de um animal — seja
doméstico ou exótico — pode ser uma experiência prazerosa, responsável e
acessível a todos. A marca se posiciona como uma aliada na promoção da saúde,
do bem-estar e da qualidade de vida animal, integrando tecnologia, carinho e
conveniência em um só lugar.
1.2 - JUSTIFICATIVA
O crescimento expressivo do número de animais de estimação no Brasil, que
atualmente ultrapassa a marca de 140 milhões, segundo dados da ABINPET (2024),
demonstra a consolidação do país como um dos maiores mercados pet do mundo.
Esse cenário revela não apenas o aumento da presença dos animais nos lares
brasileiros, mas também o fortalecimento do vínculo afetivo entre tutores e seus pets
— relação que impulsiona a busca por serviços especializados, seguros e de
qualidade.
Apesar desse avanço, muitos tutores ainda enfrentam desafios significativos ao
tentar acessar serviços confiáveis e organizados. A dificuldade em localizar
profissionais qualificados, a falta de transparência nos preços e avaliações, e a
ausência de ferramentas integradas de agendamento tornam o cuidado com os
animais mais complexo do que deveria ser. Além disso, a grande diversidade de
estabelecimentos e prestadores de serviços, sem uma estrutura de padronização ou
certificação, gera insegurança e desconfiança, tanto para quem contrata quanto para
quem oferece os serviços.
O mercado pet brasileiro, embora economicamente promissor, ainda apresenta
fragmentação e falta de integração tecnológica. Essa carência de uniformidade afeta
diretamente a experiência dos tutores, prejudica a eficiência operacional de clínicas
e pet shops, e pode até impactar o bem-estar e a saúde dos animais, devido à
dificuldade de acesso a informações e cuidados de qualidade.
Nesse contexto, a criação de uma plataforma digital unificada, que concentre
serviços, produtos e profissionais especializados, surge como uma solução
inovadora e necessária. Por meio de recursos tecnológicos, é possível promover a
praticidade, a segurança e a confiabilidade nas interações entre tutores e
prestadores de serviço, além de otimizar processos e fortalecer a relação de
confiança entre ambas as partes.
Portanto, esta pesquisa se justifica por seu potencial de impacto social e
tecnológico, ao propor uma ferramenta que resolve problemas reais do setor,
melhora a qualidade do atendimento, e promove o cuidado responsável e o bem-
estar animal. Ao integrar tecnologia e empatia, o projeto beneficia não apenas os
tutores e profissionais, mas também contribui para a evolução e profissionalização
do ecossistema pet como um todo.
REFERENCIAL TEÓRICO
2.1 – REVISÃO DE LITERATURA
O desenvolvimento de aplicações web modernas exige a integração harmoniosa de
linguagens de programação, frameworks, bancos de dados e ferramentas auxiliares,
de forma a garantir sistemas escaláveis, seguros e de fácil manutenção. No
backend, a escolha de uma linguagem robusta e versátil é essencial para a
construção de soluções eficientes e duradouras. Nesse contexto, Python destaca-se
por sua sintaxe clara, legibilidade e ampla compatibilidade com diferentes
frameworks e bancos de dados, fatores que o tornam uma das linguagens mais
utilizadas em projetos de médio e grande porte. Tais características são amplamente
reconhecidas por Martin (2018), Lutz (2013) e Van Rossum e Drake (2011), que
apontam o Python como uma linguagem ideal para o desenvolvimento ágil e
colaborativo de sistemas web.
No que se refere ao FrontEnd, a utilização de HTML combinada com mecanismos
de templates dinâmicos, como o Jinja2, permite a renderização personalizada de
páginas e a melhor separação entre a lógica de negócio e a camada de
apresentação. Essa abordagem contribui para a manutenibilidade do sistema, a
clareza estrutural do código e uma experiência de uso mais fluida e intuitiva.
Segundo Duckett (2014), Frain (2015) e Grinberg (2018), a combinação de
tecnologias leves e responsivas é um dos pilares para o desenvolvimento de
interfaces modernas e centradas no usuário.
Além da seleção adequada das tecnologias, o sucesso de um projeto de software
depende fortemente da metodologia de desenvolvimento adotada. Nesse cenário, as
metodologias ágeis emergem como abordagens eficazes para otimizar o processo
de trabalho, garantir entregas contínuas de valor e responder rapidamente às
mudanças de requisitos. Entre essas metodologias, o Scrum se destaca por sua
estrutura iterativa e incremental, baseada em ciclos curtos de desenvolvimento
conhecidos como sprints.
De acordo com Schwaber e Sutherland (2020), o Scrum é sustentado por três
pilares fundamentais — transparência, inspeção e adaptação — e organiza-se por
meio de papéis (Product Owner, Scrum Master e Time de Desenvolvimento),
eventos (como Daily Scrum, Sprint Review e Sprint Retrospective) e artefatos (como
o Product Backlog e o Sprint Backlog). Essa estrutura promove uma comunicação
constante entre os membros da equipe, melhora o alinhamento entre objetivos
técnicos e necessidades do usuário, e possibilita ajustes contínuos ao longo do
desenvolvimento do produto.
A aplicação do Scrum em projetos de desenvolvimento web proporciona maior
flexibilidade, redução de riscos e melhoria na qualidade das entregas, já que o
processo é guiado por revisões frequentes e pela entrega incremental de
funcionalidades testáveis. Conforme destacam Pressman e Maxim (2022) e
Sommerville (2019), o uso de metodologias ágeis como o Scrum favorece o
aprimoramento contínuo do produto e o engajamento ativo da equipe, fatores
essenciais para o sucesso de aplicações que buscam unir eficiência técnica e
experiência do usuário.
2.2 - REFERÊNCIAS BIBLIOGRÁFICAS
DUCKETT, Jon. HTML e CSS: projete e construa websites. Rio de Janeiro: Alta
Books, 2014.
FRAIN, Ben. HTML5 e CSS3 para web designers. São Paulo: Novatec, 2015.
GRINBERG, Miguel. Flask web development: developing web applications with
Python. 2. ed. Sebastopol: O’Reilly Media, 2018.
LUTZ, Mark. Learning Python. 5. ed. Sebastopol: O’Reilly Media, 2013.
MARTIN, Robert C. Clean architecture: a craftsman’s guide to software structure and
design. Boston: Prentice Hall, 2018.
PRESSMAN, Roger S.; MAXIM, Bruce R. Engenharia de software: uma abordagem
profissional. 9. ed. Porto Alegre: AMGH, 2022.
SCHWABER, Ken; SUTHERLAND, Jeff. Guia do Scrum: o guia definitivo para o
Scrum – as regras do jogo. 2020. Disponível em: https://scrumguides.org. Acesso
em: 16 out. 2025.
SOMMERVILLE, Ian. Engenharia de software. 10. ed. São Paulo: Pearson, 2019.
VAN ROSSUM, Guido; DRAKE, Fred L. The Python language reference manual. 4.
ed. Scotts Valley: CreateSpace, 2011.
METODOLOGÍA E DESENVOLVIMENTO
3.1 – METODOLOGIA
A presente pesquisa adotou abordagem bibliográfica e descritiva, com o objetivo de
compreender o desenvolvimento de aplicações web modernas, analisando as
tecnologias empregadas em backend, frontend e banco de dados. A pesquisa
bibliográfica consistiu na análise de livros, artigos científicos, manuais técnicos e
documentações oficiais de ferramentas e bibliotecas, como Python, Flask, Jinja2,
SQLAlchemy e python-dotenv, priorizando materiais atualizados, reconhecidos
academicamente e relevantes para a temática estudada.
Paralelamente, a pesquisa descritiva foi realizada por meio da observação e análise
do código-fonte da aplicação, incluindo a organização de arquivos e módulos, o
funcionamento dos templates e o fluxo de dados entre as camadas do sistema. Esse
procedimento permitiu identificar e registrar a função de cada componente, bem
como a interação entre backend, frontend e banco de dados, garantindo uma
compreensão detalhada da estrutura e das funcionalidades da aplicação.
No tocante à gestão do desenvolvimento, foi adotada a metodologia ágil Scrum, que
se destaca por seu caráter iterativo e incremental, promovendo entregas contínuas
de valor e adaptabilidade às mudanças de requisitos. Conforme Schwaber e
Sutherland (2020), o Scrum estrutura-se em papéis, eventos e artefatos que visam
aumentar a transparência e a colaboração entre os membros da equipe. Entre os
papéis principais, destacam-se o Product Owner, responsável por definir as
prioridades e objetivos do produto; o Scrum Master, que garante o cumprimento das
práticas ágeis; e o Time de Desenvolvimento, que executa as tarefas técnicas.
Durante o projeto, o trabalho foi dividido em sprints ciclos curtos de
desenvolvimento,nos quais foram planejadas,implementadase revisadas partes
específicas da aplicação. As cerimônias ágeis, como o Sprint Planning, o Daily
Scrum, a Sprint Review e a Sprint Retrospective, foram adaptadas para organizar as
tarefas, acompanhar o progresso e identificar oportunidades de melhoria contínua.
Essa abordagem favoreceu a comunicação entre os integrantes, o acompanhamento
sistemático do projeto e a entrega progressiva de funcionalidades.
Dessa forma, a metodologia adotada combinou pesquisa bibliográfica e descritiva
com a aplicação prática de princípios ágeis, permitindo descrever e compreender o
processo de desenvolvimento de maneira sistemática e fundamentada. Essa
integração resultou em uma análise consistente sobre a construção de aplicações
web dinâmicas, integradas e escaláveis, sustentada por bases teóricas sólidas e
práticas contemporâneas de engenharia de software.
3.2 - DESENVOLVIMENTO
O desenvolvimento da pesquisa consistiu na aplicação dos procedimentos
metodológicos previamente definidos, com foco na análise detalhada da construção,
funcionamento e gestão da aplicação web estudada. Inicialmente, realizou-se a
identificação das tecnologias empregadas, contemplando o backend desenvolvido
em Python, o microframework Flask, o mecanismo de templates Jinja2, o
gerenciamento de banco de dados por meio do SQLAlchemy e a configuração de
variáveis de ambiente utilizando a biblioteca python-dotenv. Essas ferramentas
foram escolhidas pela sua robustez, integração simplificada e ampla utilização em
projetos modernos de desenvolvimento web.
Na sequência, foi conduzida uma análise minuciosa da estrutura do código-fonte,
abrangendo a organização dos arquivos e módulos, a definição dos modelos de
dados no arquivo models.py e a implementação das rotas e funcionalidades
principais do sistema. A observação concentrou-se na integração entre backend e
frontend, examinando o fluxo de processamento, armazenamento e exibição de
dados nas principais páginas da aplicação — index.html, login.html, cadastro.html,
petshops.html e petshop_detail.html.
Durante esse processo, foram mapeados os fluxos de dados entre as camadas, as
interações entre bibliotecas e frameworks, e o modo como os templates do Jinja2
realizam a renderização dinâmica de conteúdos personalizados para o usuário. Essa
análise permitiu compreender a estrutura modular da aplicação, identificar boas
práticas de programação, e avaliar a eficiência do sistema em oferecer
funcionalidades essenciais de maneira segura, escalável e de fácil manutenção.
Paralelamente à análise técnica, o desenvolvimento da aplicação foi organizado
segundo a metodologia ágil Scrum, amplamente empregada em projetos de software
devido à sua abordagem iterativa, incremental e colaborativa. Conforme Schwaber e
Sutherland (2020), o Scrum estrutura-se em papéis, eventos e artefatos que
promovem transparência, inspeção e adaptação contínua, favorecendo a entrega de
valor ao longo de todo o ciclo de desenvolvimento.
Nesse contexto, o trabalho foi dividido em sprints curtos, cada um com metas
específicas relacionadas à implementação de funcionalidades, correção de falhas e
integração de novos recursos. O Product Owner ficou responsável por definir
prioridades e requisitos do produto; o Scrum Master atuou como facilitador das
práticas ágeis, assegurando o cumprimento do processo e a remoção de
impedimentos; e o Time de Desenvolvimento executou as tarefas técnicas e
implementações previstas em cada sprint.
Durante a execução do projeto, foram realizadas reuniões de planejamento (Sprint
Planning), destinadas à definição dos objetivos de cada sprint; reuniões diárias
(Daily Scrum), voltadas ao acompanhamento do progresso e à identificação de
ajustes necessários; e revisões e retrospectivas (Sprint Review e Sprint
Retrospective), com foco na avaliação dos resultados obtidos e na identificação de
oportunidades de melhoria contínua.
A aplicação prática do Scrum proporcionou maior flexibilidade diante de mudanças
de requisitos, melhor comunicação entre os integrantes da equipe e entregas
incrementais de valor, permitindo a evolução progressiva e controlada da aplicação.
Dessa forma, ao aliar os aspectos técnicos da construção do sistema às práticas de
gestão ágil, a pesquisa obteve uma visão integrada e fundamentada do
desenvolvimento de aplicações web modernas, consolidando a relação entre
fundamentos teóricos, metodológicos e práticos da engenharia de software
contemporânea.
3.3 - METODOLOGÍA SCRUM
A metodologia ágil Scrum foi adotada nesta pesquisa como modelo de gestão do
processo de desenvolvimento, por sua capacidade de promover entregas contínuas,
adaptação a mudanças e colaboração entre os membros da equipe. Criada por Ken
Schwaber e Jeff Sutherland, o Scrum é amplamente reconhecido como um framework
iterativo e incremental voltado à melhoria da eficiência e à qualidade no
desenvolvimento de software.
De acordo com Schwaber e Sutherland (2020), o Scrum baseia-se em três pilares
fundamentais: transparência, inspeção e adaptação.
A transparência garante que todos os envolvidos tenham uma visão clara do
andamento do projeto e das tarefas em execução; a inspeção permite revisar
continuamente os resultados e identificar possíveis desvios; e a adaptação assegura
que o projeto possa ser ajustado de acordo com novas necessidades ou descobertas
ao longo do processo.
A estrutura do Scrum é composta por papéis, eventos e artefatos, que se interligam
para promover um ciclo contínuo de melhoria.
Entre os papéis principais, destacam-se:
• o Product Owner, responsável por definir as prioridades e os requisitos do
produto, representando os interesses do cliente e assegurando que o time
concentre esforços nas funcionalidades de maior valor;
• o Scrum Master, que atua como facilitador das práticas ágeis, garantindo que
o time siga corretamente os princípios do framework e removendo eventuais
impedimentos;
• e o Time de Desenvolvimento, composto por profissionais multidisciplinares e
auto-organizados, responsáveis pela implementação técnica das
funcionalidades e correção de falhas.
O processo de trabalho é dividido em sprints, que são ciclos curtos de
desenvolvimento, geralmente com duração de duas a quatro semanas. Cada sprint
possui metas específicas e resulta na entrega de um incremento funcional do produto,
ou seja, uma versão parcialmente concluída e testável.
Durante cada ciclo, são realizados eventos regulares que garantem o ritmo e a
organização das atividades:
• o Sprint Planning, no qual são definidos os objetivos e as tarefas que comporão
o sprint;
• o Daily Scrum, reunião diária e breve voltada ao acompanhamento do
progresso e à identificação de possíveis ajustes;
• o Sprint Review, realizado ao término do sprint, com o objetivo de apresentar
as funcionalidades concluídas e obter feedback dos stakeholders;
• e o Sprint Retrospective, momento de reflexão e aprendizado, destinado à
avaliação do desempenho da equipe e à definição de melhorias para o próximo
ciclo.
Os artefatos do Scrum também desempenham papel essencial na gestão do projeto.
O Product Backlog contém a lista priorizada de requisitos, funcionalidades e melhorias
a serem implementadas; o Sprint Backlog reúne os itens selecionados para o sprint
atual e o plano de execução; e o Incremento representa o resultado tangível do
trabalho, configurando uma entrega de valor real para o usuário.
A aplicação do Scrum nesta pesquisa proporcionou maior controle e visibilidade sobre
o progresso das tarefas, permitindo ajustes rápidos diante de novas demandas e
garantindo uma comunicação eficaz entre todos os envolvidos. Além disso, o modelo
ágil favoreceu a entrega progressiva e validada de funcionalidades, assegurando que
o desenvolvimento da aplicação ocorresse de forma organizada, eficiente e centrada
na qualidade.
Assim, a utilização do Scrum neste projeto permitiu integrar as práticas ágeis ao
desenvolvimento técnico, fortalecendo a relação entre gestão, colaboração e
qualidade — pilares essenciais para o sucesso de aplicações web modernas e
escaláveis.
PROJETO
4.1 - INDEX
A página Index representa a interface inicial da aplicação web, sendo responsável
por oferecer ao usuário uma experiência intuitiva e funcional logo no primeiro
acesso. Seu principal objetivo é facilitar a navegação e a busca por serviços pet
próximos, reunindo informações essenciais de forma clara, organizada e
visualmente agradável.
No topo da página, encontra-se o menu de navegação, que permite o acesso rápido
às seções “Petshops”, “Como funciona” e “Contato”, além dos botões de login e
cadastro de pet, localizados estrategicamente para promover a praticidade e o
engajamento do usuário. Essa estrutura segue os princípios de usabilidade e
acessibilidade, garantindo que o tutor encontre facilmente as funcionalidades
desejadas.
O conteúdo central da página destaca o campo de busca, por meio do qual o usuário
pode localizar estabelecimentos, serviços ou profissionais de acordo com suas
necessidades específicas. A mensagem principal —
“Seu pet bem cuidado sem você
precisar perder tempo” — reforça o propósito da plataforma de oferecer praticidade e
confiança na contratação de serviços pet.
Abaixo da área de busca, são exibidas recomendações de petshops próximos, com
informações como nome do estabelecimento, distância, avaliação média e botões de
ação para visualizar o perfil ou agendar diretamente o serviço. Esse componente foi
implementado de forma dinâmica, permitindo a futura integração com um banco de
dados relacional via SQLAlchemy, o que possibilitará a exibição personalizada dos
resultados conforme a localização e preferências do usuário.
Do ponto de vista técnico, a página foi desenvolvida com o uso do framework Flask
e do motor de templates Jinja2, que permitem a renderização dinâmica de conteúdo
e a integração direta com o backend. A estrutura modular do código favorece a
separação entre a lógica de negócio e a camada de apresentação, tornando o
sistema mais organizado, escalável e de fácil manutenção.
Durante o processo de desenvolvimento, o layout da Index foi projetado com foco na
responsividade, assegurando que a interface se adapte adequadamente a diferentes
dispositivos — como computadores, tablets e smartphones — sem comprometer a
legibilidade ou a experiência do usuário. Foram aplicados princípios de design limpo
e minimalista, com ênfase em cores neutras e elementos de destaque em amarelo e
cinza-claro, que refletem a identidade visual da marca e reforçam a sensação de
confiabilidade.
Em termos metodológicos, a implementação da página Index foi conduzida dentro
de um ciclo de sprint do Scrum, que abrangeu as etapas de planejamento,
desenvolvimento, testes e revisão. Durante esse período, foram discutidos ajustes
de layout, aprimoramentos na organização dos elementos e melhorias na
experiência do usuário, seguindo os feedbacks coletados ao final da sprint.
Assim, a página Index cumpre papel fundamental no sistema, atuando como porta
de entrada da aplicação e consolidando os princípios de usabilidade, eficiência e
design responsivo que norteiam todo o projeto. Sua construção integra aspectos
técnicos, estéticos e funcionais, alinhando a proposta tecnológica da TechPett à
missão de oferecer soluções práticas e seguras no cuidado com animais de
estimação.
4.2 – TELA DE CADASTRO
A tela de cadastro da aplicação tem como finalidade permitir que novos usuários
criem uma conta para acessar as funcionalidades exclusivas da plataforma. Essa
etapa é essencial para a personalização da experiência do usuário, possibilitando o
armazenamento de informações individuais e o gerenciamento de interações dentro
do sistema.
A interface apresenta um formulário simples e direto, composto pelos campos nome,
e-mail e senha, que devem ser preenchidos para a criação do perfil. O design foi
desenvolvido com foco na clareza e acessibilidade, utilizando contraste adequado
entre o fundo claro e os botões em amarelo, cor predominante na identidade visual
da marca, o que garante melhor legibilidade e orientação visual.
Ao preencher os campos e acionar o botão “Criar conta”, os dados são enviados
para o servidor Flask, que realiza o processamento das informações e o registro no
banco de dados SQLAlchemy. Essa integração entre frontend e backend foi
estruturada de forma a assegurar eficiência e segurança, permitindo a validação das
informações e prevenindo inconsistências, como cadastros duplicados ou entradas
incorretas.
A arquitetura da página segue os princípios de separação de responsabilidades
entre a camada de apresentação (HTML e Jinja2) e a lógica de negócio
(Python/Flask), o que facilita futuras manutenções e ampliações do sistema. Além
disso, o template Jinja2 permite que o conteúdo seja renderizado dinamicamente,
tornando possível adaptar mensagens e respostas do sistema conforme o
comportamento do usuário durante o cadastro.
Em termos visuais, a tela mantém o padrão estético minimalista e responsivo, já
aplicado nas demais páginas da aplicação, garantindo coerência visual e
navegabilidade fluida. O formulário foi centralizado na página para facilitar o
preenchimento em dispositivos móveis e desktops, atendendo aos princípios de
design responsivo e usabilidade.
Durante o desenvolvimento dessa etapa, o trabalho foi conduzido sob a metodologia
ágil Scrum, dentro de um ciclo de sprint voltado à implementação das rotas de
autenticação e ao design das telas de acesso. Durante o Sprint Planning, foram
definidos os requisitos funcionais do cadastro, enquanto as reuniões diárias (Daily
Scrum) permitiram o acompanhamento da evolução do código e ajustes nas
validações. Na Sprint Review, o formulário foi apresentado à equipe, e, a partir dos
feedbacks coletados, realizou-se a melhoria na clareza das mensagens de erro e na
disposição dos campos.
Com isso, a tela de cadastro cumpre uma função estratégica na aplicação, pois
representa o primeiro ponto de interação ativa do usuário com o sistema,
estabelecendo a base para o acesso às demais funcionalidades da TechPett. Sua
implementação reflete a combinação entre boas práticas de desenvolvimento web,
segurança de dados e design centrado no usuário, princípios que norteiam todo o
projeto.
4.3 – TELA DE LOGIN
A tela de login é responsável por permitir o acesso seguro e autenticado dos
usuários ao sistema, sendo uma das etapas mais importantes do fluxo de
navegação da aplicação. Ela foi desenvolvida com foco em simplicidade, clareza e
segurança, de forma a proporcionar uma experiência fluida tanto para usuários
recorrentes quanto para novos cadastrados.
A interface apresenta um formulário centralizado, composto pelos campos e-mail e
senha, além de botões que permitem alternar entre as opções “Entrar” e “Cadastrar”,
oferecendo ao usuário a possibilidade de criar uma nova conta ou acessar uma já
existente. Essa disposição favorece a usabilidade e evita redirecionamentos
desnecessários, tornando o processo mais intuitivo.
Do ponto de vista técnico, a página foi construída utilizando o framework Flask no
backend e o template engine Jinja2 para a renderização dinâmica do conteúdo,
integrando-se de forma direta ao banco de dados SQLAlchemy. Quando o usuário
insere suas credenciais e aciona o botão “Entrar”, o sistema envia os dados ao
servidor, que realiza a validação das informações e, em caso de sucesso, autentica
o acesso à conta do usuário.
Para garantir segurança e integridade dos dados, o sistema foi projetado para
implementar futuramente mecanismos de criptografia de senhas, geração de tokens
de sessão e validação de formulários, prevenindo vulnerabilidades comuns em
aplicações web, como ataques de injeção de código e acesso não autorizado.
O design visual da tela segue o padrão estético adotado nas demais páginas da
aplicação, com tons neutros e elementos em amarelo, mantendo a identidade visual
da marca TechPett. O uso de espaçamento equilibrado e tipografia legível reforça a
clareza da interface, garantindo acessibilidade e responsividade em diferentes
dispositivos, desde desktops até smartphones.
Durante o desenvolvimento, a criação dessa tela foi conduzida dentro de um ciclo de
sprint da metodologia ágil Scrum, que incluiu as etapas de planejamento,
implementação, testes e revisão. No Sprint Planning, foram definidos os critérios de
autenticação e os requisitos de segurança; nas Daily Scrums, monitorou-se o
andamento das tarefas; e na Sprint Review, a equipe avaliou a funcionalidade de
login com foco em eficiência, validação de campos e feedback visual ao usuário.
Assim, a tela de login representa uma interface essencial para o controle de acesso
à aplicação, unindo praticidade, segurança e design funcional. Sua implementação
reflete o compromisso do projeto em oferecer um sistema confiável, escalável e
centrado na experiência do usuário, consolidando a base de autenticação
necessária para o funcionamento completo da TechPett.